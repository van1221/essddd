// src/App.js (High-level structure)
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';
import Auth from './components/Auth';
import MapComponent from './components/MapComponent';
import Reservations from './components/Reservations';
import UserProfile from './components/UserProfile';

function App() {
    const [token, setToken] = useState(localStorage.getItem('authToken'));
    const [stations, setStations] = useState([]);

    // WebSocket for real-time updates
    useEffect(() => {
        if (!token) return;

        const ws = new WebSocket('ws://localhost:3000'); // Connect to your backend WebSocket

        ws.onopen = () => {
            console.log('WebSocket connected');
        };

        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.type === 'station_availability_update') {
                setStations(data.stations); // Update station data with real-time info
            }
        };

        ws.onclose = () => {
            console.log('WebSocket disconnected');
        };

        ws.onerror = (error) => {
            console.error('WebSocket error:', error);
        };

        // Cleanup on unmount
        return () => {
            ws.close();
        };
    }, [token]);

    const fetchStations = async () => {
        try {
            const response = await axios.get('/api/stations', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setStations(response.data);
        } catch (error) {
            console.error('Error fetching stations:', error);
        }
    };

    useEffect(() => {
        if (token) {
            fetchStations();
        }
    }, [token]);

    const handleLoginSuccess = (newToken) => {
        setToken(newToken);
        localStorage.setItem('authToken', newToken);
    };

    const handleLogout = () => {
        setToken(null);
        localStorage.removeItem('authToken');
        setStations([]); // Clear station data on logout
    };

    return (
        <div className="App">
            <header>
                <h1>EV Charging Network</h1>
                {token ? (
                    <button onClick={handleLogout}>Logout</button>
                ) : (
                    <Auth onLoginSuccess={handleLoginSuccess} />
                )}
            </header>
            {token && (
                <main>
                    <MapComponent stations={stations} />
                    <Reservations stations={stations} token={token} />
                    <UserProfile token={token} />
                </main>
            )}
        </div>
    );
}

export default App;
